/**
 * Aplikasi Room Management
 * @author Irene Wiliudarsan - 13513002
 * @author William Sentosa - 13513026
 * @author Angela Lynn - 13513032
 * @author Devina Ekawati - 13513088
 */
package gui;

import bookinginformation.BookingInformation;
import database.BorrowingModel;
import database.MaintenanceModel;
import database.RoomModel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;

/**
 *
 * @author angelynz95
 */
public class BookingInformationPanel extends javax.swing.JPanel {
    BookingInformation bookingInformation;
    Color defaultColor;
    GregorianCalendar date;
    List<String> rooms;
    List<String> schedules;
    MainFrame mainFrame;

    /**
     * Creates new form BookingInformation
     */
    public BookingInformationPanel(GregorianCalendar date) {
        initComponents();
        bookingInformation = new BookingInformation();
        this.date = date;
        rooms = new ArrayList<String>();
        schedules = new ArrayList<String>();
        mainFrame = MainFrame.getInstance();
//        dateField.setDate(date.getTime());
        setRooms();
        setSchedules();
        customizeBookingInformationPane();
        showBookingInformation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bookingInformationPane = new javax.swing.JScrollPane();
        bookingInformationPanel = new javax.swing.JPanel();
        borrowingButton = new javax.swing.JButton();
        maintenanceButton = new javax.swing.JButton();
        dateField = new org.freixas.jcalendar.JCalendarCombo();

        javax.swing.GroupLayout bookingInformationPanelLayout = new javax.swing.GroupLayout(bookingInformationPanel);
        bookingInformationPanel.setLayout(bookingInformationPanelLayout);
        bookingInformationPanelLayout.setHorizontalGroup(
            bookingInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1154, Short.MAX_VALUE)
        );
        bookingInformationPanelLayout.setVerticalGroup(
            bookingInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 535, Short.MAX_VALUE)
        );

        bookingInformationPane.setViewportView(bookingInformationPanel);

        borrowingButton.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        borrowingButton.setText("Pemesanan");
        borrowingButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borrowingButtonMouseClicked(evt);
            }
        });

        maintenanceButton.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        maintenanceButton.setText("Pemeliharaan");
        maintenanceButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                maintenanceButtonMouseClicked(evt);
            }
        });

        dateField.setDateFormat(new SimpleDateFormat("dd/MM/yyyy"));
        dateField.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        dateField.addDateListener(new org.freixas.jcalendar.DateListener() {
            public void dateChanged(org.freixas.jcalendar.DateEvent evt) {
                dateFieldDateChanged(evt);
            }
        });
        dateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(230, 230, 230)
                        .addComponent(borrowingButton)
                        .addGap(18, 18, 18)
                        .addComponent(maintenanceButton))
                    .addComponent(bookingInformationPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(borrowingButton)
                    .addComponent(maintenanceButton)
                    .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(bookingInformationPane, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dateFieldDateChanged(org.freixas.jcalendar.DateEvent evt) {//GEN-FIRST:event_dateFieldDateChanged
        // TODO add your handling code here:
        bookingInformationPanel.removeAll();
        date = (GregorianCalendar) evt.getSelectedDate();
        bookingInformation = new BookingInformation();
        showBookingInformation();
        bookingInformationPanel.repaint();
        bookingInformationPanel.revalidate();
    }//GEN-LAST:event_dateFieldDateChanged

    private void dateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateFieldActionPerformed

    private void borrowingButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrowingButtonMouseClicked
        // TODO add your handling code here:
        BorrowingFrame borrowingFrame = new BorrowingFrame();
        borrowingFrame.setVisible(true);
    }//GEN-LAST:event_borrowingButtonMouseClicked

    private void maintenanceButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maintenanceButtonMouseClicked
        // TODO add your handling code here:
        MaintenanceFrame maintenanceFrame = new MaintenanceFrame();
        maintenanceFrame.setVisible(true);
    }//GEN-LAST:event_maintenanceButtonMouseClicked

    private void setRooms() {
        for(Map.Entry<RoomModel, Map<Integer, Object>> roomSchedule: bookingInformation.getRoomsSchedule().entrySet()) {
            rooms.add(roomSchedule.getKey().getName());
        }
    }
    
    private void setSchedules() {
        for (int i = 7; i < 9; i++) {
            schedules.add("0" + i + ".00 - 0" + (i+1) + ".00");
        }
        schedules.add("09.00 - 10.00");
        for (int i = 0; i < 9; i++) {
            schedules.add("1" + i + ".00 - 1" + (i+1) + ".00");
        }
        schedules.add("19.00 - 20.00");
        for (int i = 0; i <= 2; i++) {
            schedules.add("2" + i + ".00 - 2" + (i+1) + ".00");
        }
    }
    
    private void customizeBookingInformationPane() {
        bookingInformationPane.setOpaque(false);
        bookingInformationPane.getViewport().setOpaque(false);
        bookingInformationPane.setBorder(null);
        bookingInformationPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        bookingInformationPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        bookingInformationPanel.setLayout(new GridLayout(0, rooms.size() + 1));
    }
    
    private void showBookingInformation() {
        bookingInformation.showBookingSchedule(date);
        bookingInformation.showMaintenanceSchedule(date);
        customizeRoomCells();
        customizeScheduleCells();
    }
    
    private void customizeRoomCells() {
        JLabel roomLabel;
        
        roomLabel = new JLabel();
        customizeLabel(roomLabel);
        roomLabel.setBackground(Color.lightGray);
        roomLabel.setText("");
        bookingInformationPanel.add(roomLabel);
        
        for (int i = 0; i < rooms.size(); i++) {
            roomLabel = new JLabel();
            customizeLabel(roomLabel);
            roomLabel.setBackground(Color.lightGray);
            roomLabel.setText(rooms.get(i));
            bookingInformationPanel.add(roomLabel);
        }
    }
    
    private void customizeScheduleCells() {
        JLabel scheduleLabel, timeLabel;
        
        for (int i = 0; i < schedules.size(); i++) {
            timeLabel = new JLabel();
            customizeLabel(timeLabel);
            timeLabel.setBackground(Color.lightGray);
            timeLabel.setText(schedules.get(i));
            bookingInformationPanel.add(timeLabel);
            
            for(Map.Entry<RoomModel, Map<Integer, Object>> roomSchedule: bookingInformation.getRoomsSchedule().entrySet()) {
                scheduleLabel = new JLabel();                
                customizeLabel(scheduleLabel);
                if (roomSchedule.getValue().size() > 0) {
                    if (roomSchedule.getValue().containsKey(i + 7)) {
                        if (roomSchedule.getValue().get(i + 7).getClass().equals(BorrowingModel.class)) {
                            BorrowingModel borrowing = (BorrowingModel) roomSchedule.getValue().get(i + 7);
                            scheduleLabel.setBackground(new Color(138, 199, 222));
                            scheduleLabel.addMouseListener(new MouseAdapter() {
                                @Override
                                public void mouseClicked(MouseEvent mouseEvent) {
                                    BookingDetailFrame bookingDetailFrame = new BookingDetailFrame(borrowing, roomSchedule.getKey().getName());
                                    bookingDetailFrame.setVisible(true);
                                }
                            });
                        } else if (roomSchedule.getValue().get(i + 7).getClass().equals(MaintenanceModel.class)) {
                            MaintenanceModel maintenance = (MaintenanceModel) roomSchedule.getValue().get(i + 7);
                            scheduleLabel.setBackground(new Color(250, 127, 119));
                            scheduleLabel.addMouseListener(new MouseAdapter() {
                                @Override
                                public void mouseClicked(MouseEvent mouseEvent) {
                                    MaintenanceDetailFrame maintenanceDetailFrame = new MaintenanceDetailFrame(maintenance, roomSchedule.getKey().getName());
                                    maintenanceDetailFrame.setVisible(true);
                                }
                            });
                        }
                    }
                }
                bookingInformationPanel.add(scheduleLabel);
            }
        }
    }
    
    private void customizeLabel(JLabel label) {
        label.setPreferredSize(new Dimension(200, 16));
        label.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        label.setHorizontalAlignment(SwingConstants.CENTER);
        label.setVerticalAlignment(SwingConstants.CENTER);
        label.setFont(new Font("Roboto", Font.PLAIN, 16));
        label.setOpaque(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane bookingInformationPane;
    private javax.swing.JPanel bookingInformationPanel;
    private javax.swing.JButton borrowingButton;
    private org.freixas.jcalendar.JCalendarCombo dateField;
    private javax.swing.JButton maintenanceButton;
    // End of variables declaration//GEN-END:variables
}
