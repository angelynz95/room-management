/**
 * Aplikasi Room Management
 * @author Irene Wiliudarsan - 13513002
 * @author William Sentosa - 13513026
 * @author Angela Lynn - 13513032
 * @author Devina Ekawati - 13513088
 */
package gui;

import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.BorderFactory;
import javax.swing.SpinnerDateModel;

/**
 *
 * @author angelynz95
 */
public class MaintenanceFrame extends javax.swing.JFrame {

    /**
     * Creates new form MaintenanceFrame
     */
    public MaintenanceFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        descriptionLabel = new javax.swing.JLabel();
        addMaintenanceButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionField = new javax.swing.JTextArea();
        roomNameLabel = new javax.swing.JLabel();
        timeSeperatorLabel = new javax.swing.JLabel();
        startDateField = new org.freixas.jcalendar.JCalendarCombo();
        startTimeField = new javax.swing.JSpinner(new SpinnerDateModel());
        roomNameDropdown = new javax.swing.JComboBox();
        finishDateField = new org.freixas.jcalendar.JCalendarCombo();
        finishTimeField = new javax.swing.JSpinner(new SpinnerDateModel());
        timeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Penambahan Pemeliharaan Ruangan");
        setResizable(false);

        descriptionLabel.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        descriptionLabel.setText("Deskripsi");

        addMaintenanceButton.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        addMaintenanceButton.setText("Simpan");
        addMaintenanceButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                validateForm(evt);
            }
        });

        descriptionField.setColumns(20);
        descriptionField.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        descriptionField.setRows(5);
        jScrollPane1.setViewportView(descriptionField);

        roomNameLabel.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        roomNameLabel.setText("Nama Ruangan");

        timeSeperatorLabel.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        timeSeperatorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeSeperatorLabel.setText("-");
        timeSeperatorLabel.setAlignmentX(0.5F);

        startDateField.setDateFormat(new SimpleDateFormat("dd/MM/yyyy"));
        startDateField.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        startTimeField.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        roomNameDropdown.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        roomNameDropdown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        finishDateField.setDateFormat(new SimpleDateFormat("dd/MM/yyyy"));
        finishDateField.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        finishTimeField.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N

        timeLabel.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        timeLabel.setText("Waktu Pemeliharaan");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addMaintenanceButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(timeLabel)
                                    .addComponent(roomNameLabel))
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(descriptionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(roomNameDropdown, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(startDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeSeperatorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(finishDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(finishTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(roomNameDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(timeSeperatorLabel)
                    .addComponent(startDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finishDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finishTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addMaintenanceButton)
                .addGap(36, 36, 36))
        );

        javax.swing.JSpinner.DateEditor startTimeEditor = new javax.swing.JSpinner.DateEditor(startTimeField, "HH.mm");
        startTimeField.setEditor(startTimeEditor);

        Calendar calendar = GregorianCalendar.getInstance();
        calendar.setTime(new Date());
        startTimeField.setValue(new Date(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DATE), calendar.get(Calendar.HOUR_OF_DAY), 0)); // Will only show the current time
        javax.swing.JSpinner.DateEditor finishTimeEditor = new javax.swing.JSpinner.DateEditor(finishTimeField, "HH.mm");
        finishTimeField.setEditor(finishTimeEditor);
        finishTimeField.setValue(new Date(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DATE), calendar.get(Calendar.HOUR_OF_DAY), 0)); // Will only show the current time

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void validateForm(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_validateForm
        boolean isDescriptionValid = isDescriptionValid();
        boolean isDateValid = isDateValid();
        
        if(!isDescriptionValid) {
            descriptionField.setBorder(BorderFactory.createLineBorder(Color.red));
        }
        if(!isDateValid) {
            startDateField.setBorder(BorderFactory.createLineBorder(Color.red));
            startTimeField.setBorder(BorderFactory.createLineBorder(Color.red));
            finishDateField.setBorder(BorderFactory.createLineBorder(Color.red));
            finishTimeField.setBorder(BorderFactory.createLineBorder(Color.red));
        }
        if(isDateValid && isDescriptionValid) {
            // Form valid, check for clash booking schedule in database
        }
    }//GEN-LAST:event_validateForm
    
    private boolean isDescriptionValid() {
        String description = descriptionField.getText();
        return !description.isEmpty();
    }
    
    /**
     * Check whether user date and time input are valid or not.
     * Datetime will be valid if start date is earlier than now and
     * finish time is later than now.
     * 
     * @return true if date is valid
     */
    private boolean isDateValid() {
        Calendar date = startDateField.getCalendar();
        Calendar time = Calendar.getInstance();
        time.setTime((Date) startTimeField.getValue());
        Calendar startTime = convertTimeToCalendar(date, time);
        
        date = finishDateField.getCalendar();
        time = Calendar.getInstance();
        time.setTime((Date) finishTimeField.getValue());;
        Calendar finishTime = convertTimeToCalendar(date, time);
        
        Calendar nowTime = GregorianCalendar.getInstance();
        nowTime.setTime(new Date());
        
        if (nowTime.before(startTime) && startTime.before(finishTime)) {
            return true;
        } else {
            return false;
        }
    }
    
    /**
     * Convert date and time to become one Calendar data type
     * @param date date
     * @param time time
     * @return date and time in Calendar data type
     */
    private Calendar convertTimeToCalendar(Calendar date, Calendar time) {
        int year = date.get(Calendar.YEAR);
        int month = date.get(Calendar.MONTH);
        int day = date.get(Calendar.DATE);
        int hour = time.get(Calendar.HOUR_OF_DAY);
        int minute = time.get(Calendar.MINUTE);
        Calendar calendar = new GregorianCalendar(year, month, day, hour, minute);
        return calendar;
    }
    
    /**
     * Return true if calendar1 is earlier than calendar2
     * 
     * @param calendar1 earlierTime
     * @param calendar2 laterTime
     * @return true if calendar1 is earlier than calendar2
     */
    private boolean getEarlierTime(Calendar calendar1, Calendar calendar2) {
        if (calendar1.getTimeInMillis() < calendar2.getTimeInMillis()) {
            return true;
        } else {
            return false;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MaintenanceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MaintenanceFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMaintenanceButton;
    private javax.swing.JTextArea descriptionField;
    private javax.swing.JLabel descriptionLabel;
    private org.freixas.jcalendar.JCalendarCombo finishDateField;
    private javax.swing.JSpinner finishTimeField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox roomNameDropdown;
    private javax.swing.JLabel roomNameLabel;
    private org.freixas.jcalendar.JCalendarCombo startDateField;
    private javax.swing.JSpinner startTimeField;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel timeSeperatorLabel;
    // End of variables declaration//GEN-END:variables
}
